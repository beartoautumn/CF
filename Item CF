class ItemBasedCF:
    def __init__(self, path):
        self.train = {} #User-Item Rating Table （Training Set）
        self.test = {}  #User-item rating table （Test set）
        self.generate_dataset(path)

    def loadfile(self, path):
        with open(path, 'r', encoding='utf-8') as fp:
            for i, line in enumerate(fp):
                yield line.strip('\r\n')

    
    def generate_dataset(self, path, pivot=0.7):
        #Read the file, and generate the user-item score sheet and test set
        i = 0
        for line in self.loadfile(path):
            user, movie, rating, _ = line.split('::')
            if i <= 10:
                print('{},{},{},{}'.format(user, movie, rating, _))
            i += 1
            if random.random() < pivot:
                self.train.setdefault(user, {})
                self.train[user][movie] = int(rating)
            else:
                self.test.setdefault(user, {})
                self.test[user][movie] = int(rating)


    def ItemSimilarity(self):
        #Building the item-item co-occurrence matrix
        C = dict()  #Item-Item's co-occurrence matrix
        N = dict()  #Items purchased by different users
        for user,items in self.train.items():
            for i in items.keys():
                N.setdefault(i,0)
                N[i] += 1
                C.setdefault(i,{})
                for j in items.keys():
                    if i == j: 
                        continue
                    C[i].setdefault(j,0)
                    C[i][j] += 1
        #Calculate the similarity matrix
        self.W = dict()
        for i,related_items in C.items():
            self.W.setdefault(i,{})
            for j,cij in related_items.items():
                self.W[i][j] = cij / (math.sqrt(N[i] * N[j]))
        return self.W, C, N

    #Recommend to user user, the top K related users
    def Recommend(self,u,K=3,N=10):
        rank = dict()
        action_item = self.train[u]     #User u has generated items and ratings
        for i,score in action_item.items():
            # j: Item j
            # wj: the similarity between item i and item j
            for j,wj in sorted(self.W[i].items(),key=lambda x:x[1],reverse=True)[0:K]:                
                if j in action_item.keys():
                    continue
                rank.setdefault(j,0)
                # User u is interested in item j: the user's score on item i * the similarity between item i and item j
                rank[j] += score * wj
        return dict(sorted(rank.items(),key=lambda x:x[1],reverse=True)[0:N])
    
    # Calculate the recall rate and accuracy rate
    # Recall = number of recommended items / collection of all items
    # Presicion = number of recommended pairs / total number of recommendations
    def recallAndPrecision(self,k=8,nitem=10):
        hit = 0
        recall = 0
        precision = 0
        for user, items in self.test.items():
            rank = self.Recommend(user, K=k, N=nitem)
            hit += len(set(rank.keys()) & set(items.keys()))
            recall += len(items)
            precision += nitem
        return (hit / (recall * 1.0),hit / (precision * 1.0))
        
        
        
        
        
        
import os
import random
import math
path = os.path.join('ml-1m', 'ratings.dat')
icf = ItemBasedCF(path)





path = os.path.join('ml-1m', 'ratings.dat')
icf = ItemBasedCF(path)




# Calculate items
i_W, i_C, i_N = icf.ItemSimilarity()




# Item-Item Co-occurrence Matrix
df_ic = trans_dic_2_dim(i_C)



df_ic.shape


df_ic.iloc[:10,:10]



# How many different users purchased the item
print_1_dim_dic(i_N)



# Item and item similarity matrix
df_iw = trans_dic_2_dim(i_W)



df_iw.shape



df_iw.iloc[:10, :10]




recomend = icf.Recommend('520')



recomend



icf.recallAndPrecision()






